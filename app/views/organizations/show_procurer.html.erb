<style>

#cpvChart {
  width: 960px;
  height: 500px;
  background: #bbb;
}

#cpvChart text {
  pointer-events: none;
}

#cpvChart .grandparent text {
  font-weight: bold;
}

#cpvChart rect {
  fill: none;
  stroke: #fff;
}

#cpvChart rect.parent,
.grandparent rect {
  stroke-width: 2px;
}

#cpvChart .grandparent rect {
  fill: #fff;
}

#cpvChart .children rect.parent,
.grandparent rect {
  cursor: pointer;
}

#cpvChart rect.parent {
  pointer-events: all;
}

#cpvChart .children:hover rect.child,
.grandparent:hover rect {
  fill: #aaa;
}

</style>


<script src="http://d3js.org/d3.v2.min.js?2.9.1"></script>
<script type="text/javascript" charset="utf-8">
function createHighChartGraphs()
{
  winlossChart = new Highcharts.Chart({
     chart: {
          renderTo: 'winLossChart',
          plotBackgroundColor: null,
          plotBorderWidth: null,
          plotShadow: false
      },
      title: {
          text: 'Successful Tenders Vs Failed Tenders'
      },
      tooltip: {
  	    pointFormat: '{series.name}: <b>{point.percentage}%</b>',
      	percentageDecimals: 1
      },
      plotOptions: {
          pie: {
              allowPointSelect: true,
              cursor: 'pointer',
              dataLabels: {
                  enabled: true,
                  color: '#000000',
                  connectorColor: '#000000',
                  formatter: function() {
                      return '<b>'+ this.point.name +'</b>:' +this.y;
                  }
              }
          }
      },
      series: [{
          type: 'pie',
          name: 'Tender Success/Fail',
          data: [ ["Success", <%= @numAgreements %>],["Failed", <%= @numNoAgreements %>] ]
      }]
  });

  cpvCodeChart = new Highcharts.Chart({
    chart: {
        renderTo: 'cpvDistributionChart',
        plotBackgroundColor: null,
        plotBorderWidth: null,
        plotShadow: false
    },
    title: {
        text: 'Tender CPV Code Distribution'
    },
    tooltip: {
	    pointFormat: '{series.name}: <b>{point.percentage}%</b>',
    	percentageDecimals: 1
    },
    plotOptions: {
        pie: {
            allowPointSelect: true,
            cursor: 'pointer',
            dataLabels: {
                enabled: true,
                color: '#000000',
                connectorColor: '#000000',
                formatter: function() {
                    return '<b>'+ this.point.name +'</b>:' +this.y;
                }
            }
        }
    },
    series: [{
        type: 'pie',
        name: 'Tenders offered by CPV Code',
        data: [ <% @Cpvs.each do |cpv| %> <%= raw cpv %>, <% end %>]
    }]
  });

  <% if  @successfulTenders.count > 0  %>
  	altChart = new Highcharts.StockChart({
	  chart : {
		  renderTo : 'TenderActivityChart',
      type: 'column'
	  },

	  rangeSelector : {
		  selected : 5
	  },

	  title : {
		  text : 'Electronic Tender Activity'
	  },
    yAxis: {
        title: {
            text: 'Lari'
        },
        min: 0
    }, 

    series : [{
		    name : 'Estimated Value',
		    data : [ <% @successfulTenders.each do |tender| %>
                    [<%= tender[0].tender_announcement_date.to_time.to_i*1000 %>, <%=tender[0].estimated_value.to_i%>],
                  <%end%> 
                ],
        dataGrouping: {
           enabled : false
	      }
	    },{		    
        name : 'Actual Value',
		    data : [ <% @successfulTenders.each do |tender| %>
                    [<%= tender[0].tender_announcement_date.to_time.to_i*1000 %>, <%=tender[1].amount.to_i%>],
                  <%end%> 
                ],
        dataGrouping: {
           enabled : false
	      }
	    }
    ]
  });
<% end %>
}

function createD3Graphs()
{
  var margin = {top: 20, right: 0, bottom: 0, left: 0},
    width = 960,
    height = 500 - margin.top - margin.bottom,
    formatNumber = d3.format(",d"),
    transitioning;

  var x = d3.scale.linear()
      .domain([0, width])
      .range([0, width]);

  var y = d3.scale.linear()
      .domain([0, height])
      .range([0, height]);

  var treemap = d3.layout.treemap()
      .children(function(d, depth) { return depth ? null : d.children; })
      .sort(function(a, b) { return a.value - b.value; })
      .ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
      .round(false);

  var svg = d3.select("#cpvChart").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.bottom + margin.top)
      .style("margin-left", -margin.left + "px")
      .style("margin.right", -margin.right + "px")
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
      .style("shape-rendering", "crispEdges");

  var grandparent = svg.append("g")
      .attr("class", "grandparent");

  grandparent.append("rect")
      .attr("y", -margin.top)
      .attr("width", width)
      .attr("height", margin.top);

  grandparent.append("text")
      .attr("x", 6)
      .attr("y", 6 - margin.top)
      .attr("dy", ".75em");


  var root = <%= raw @jsonString %>
                  
               
  initialize(root);
  accumulate(root);
  layout(root);
  display(root);

  function initialize(root) {
    root.x = root.y = 0;
    root.dx = width;
    root.dy = height;
    root.depth = 0;
  }

  // Aggregate the values for internal nodes. This is normally done by the
  // treemap layout, but not here because of our custom implementation.
  function accumulate(d) {
    return d.children
        ? d.value = d.children.reduce(function(p, v) { return p + accumulate(v); }, 0)
        : d.value;
  }

  // Compute the treemap layout recursively such that each group of siblings
  // uses the same size (1×1) rather than the dimensions of the parent cell.
  // This optimizes the layout for the current zoom state. Note that a wrapper
  // object is created for the parent node for each group of siblings so that
  // the parent’s dimensions are not discarded as we recurse. Since each group
  // of sibling was laid out in 1×1, we must rescale to fit using absolute
  // coordinates. This lets us use a viewport to zoom.
  function layout(d) {
    if (d.children) {
      treemap.nodes({children: d.children});
      d.children.forEach(function(c) {
        c.x = d.x + c.x * d.dx;
        c.y = d.y + c.y * d.dy;
        c.dx *= d.dx;
        c.dy *= d.dy;
        c.parent = d;
        layout(c);
      });
    }
  }

  function display(d) {
    grandparent
        .datum(d.parent)
        .on("click", transition)
      .select("text")
        .text(name(d));

    var g1 = svg.insert("g", ".grandparent")
        .datum(d)
        .attr("class", "depth");

    var g = g1.selectAll("g")
        .data(d.children)
      .enter().append("g");

    g.filter(function(d) { return d.children; })
        .classed("children", true)
        .on("click", transition);

    g.selectAll(".child")
        .data(function(d) { return d.children || [d]; })
      .enter().append("rect")
        .attr("class", "child")
        .call(rect);

    g.append("rect")
        .attr("class", "parent")
        .call(rect)
      .append("title")
        .text(function(d) { return formatNumber(d.value); });

    g.append("text")
        .attr("dy", ".75em")
        .text(function(d) { return d.name; })
        .call(text);

    function transition(d) {
      if (transitioning || !d) return;
      transitioning = true;

      var g2 = display(d),
          t1 = g1.transition().duration(750),
          t2 = g2.transition().duration(750);

      // Update the domain only after entering new elements.
      x.domain([d.x, d.x + d.dx]);
      y.domain([d.y, d.y + d.dy]);

      // Enable anti-aliasing during the transition.
      svg.style("shape-rendering", null);

      // Draw child nodes on top of parent nodes.
      svg.selectAll(".depth").sort(function(a, b) { return a.depth - b.depth; });

      // Fade-in entering text.
      g2.selectAll("text").style("fill-opacity", 0);

      // Transition to the new view.
      t1.selectAll("text").call(text).style("fill-opacity", 0);
      t2.selectAll("text").call(text).style("fill-opacity", 1);
      t1.selectAll("rect").call(rect);
      t2.selectAll("rect").call(rect);

      // Remove the old node when the transition is finished.
      t1.remove().each("end", function() {
        svg.style("shape-rendering", "crispEdges");
        transitioning = false;
      });
    }

    return g;
  }

  function text(text) {
    text.attr("x", function(d) { return x(d.x) + 6; })
        .attr("y", function(d) { return y(d.y) + 6; });
  }

  function rect(rect) {
    rect.attr("x", function(d) { return x(d.x); })
        .attr("y", function(d) { return y(d.y); })
        .attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
        .attr("height", function(d) { return y(d.y + d.dy) - y(d.y); });
  }

  function name(d) {
    return d.parent
        ? name(d.parent) + "." + d.name
        : d.name;
  }
}




$(function () {
    var winLossGraph;
    var cpvCodeChart;
    var procurerGraph;
    var competitorGraph;
    var tendersValueGraph;
 
    $(document).ready(function() {        
      createHighChartGraphs();
      createD3Graphs();
  });
});
</script>


<%- model_class = Organization -%>
<div class="page-header">
  <h1>Procurer</h1>
</div>

<dl class="info-horizontal">
  <dt><strong><%= model_class.human_attribute_name(:name) %>:</strong></dt>
  <dd><%= @organization.name %></dd>
  <dt><strong>Identification code:</strong></dt>
  <dd><%= @organization.code %></dd>
  <dt><strong><%= model_class.human_attribute_name(:org_type) %>:</strong></dt>
  <dd><%= t(@organization.org_type) %></dd>
  <dt><strong><%= model_class.human_attribute_name(:city) %>:</strong></dt>
  <dd><%= @organization.city %></dd>
  <dt><strong><%= model_class.human_attribute_name(:address) %>:</strong></dt>
  <dd><%= @organization.address %></dd>
  <dt><strong><%= model_class.human_attribute_name(:phone_number) %>:</strong></dt>
  <dd><%= @organization.phone_number %></dd>
  <% if @organization.fax_number.length > 0 %>
    <dt><strong><%= model_class.human_attribute_name(:fax_number) %>:</strong></dt>
    <dd><%= @organization.fax_number %></dd>
  <% end %>
  <dt><strong><%= model_class.human_attribute_name(:email) %>:</strong></dt>
  <dd><%= mail_to @organization.email %></dd>
  <dt><strong><%= model_class.human_attribute_name(:webpage) %>:</strong></dt>
  <dd><a href="<%= @organization.webpage%>"> <%= @organization.webpage %></a></dd>


  <div id="winLossChart" style="min-width: 400px; height: 400px; margin: 0 auto"></div>
  <div id="cpvDistributionChart" style="min-width: 400px; height: 400px; margin: 0 auto"></div>
  <div id="TenderActivityChart" style="min-width: 400px; height: 400px; margin: 0 auto"></div>
  <p id="cpvChart">


  <dt><strong>Estimated Cost: All Tenders</strong></dt>
  <dd>$<%= @totalEstimate.round(2)  %></dd>
  <dt><strong>Actual Cost: All Tenders</strong></dt>
  <dd>$<%= @actualCost.round(2)  %></dd>
  <dt><strong>Savings percentage</strong></dt>
  <dd>%<%= @costVsEstimateSaving  %></dd>
  <dt><strong>Average Bidders</strong></dt>
  <dd><%= @averageBidders.round(2)  %></dd>
  <dt><strong>Average Bids</strong></dt>
  <dd><%= @averageBids.round(2)  %></dd>
</dl>


<%= link_to "test", :controller => "organizations", :action => "procurer_test"  %> 
<br></br>
<h3>Tenders Issued</h3>
<br></br>

  <table class="dataTable" cellpadding="0" cellspacing="0" border="0" width="100%" >
  <thead>
    <tr>
      <th>Tender</th>
      <th>Announcement Date</th>
      <th>Estimated Value</th>
      <th>CPV Code</th>
      <th>CPV Description</th>
    </tr>
  </thead>
  <tbody>      
    <% @tendersOffered.each do |tender| %>
      <tr>
        <td><%= link_to tender.tender_registration_number, tender_path(tender[:id]) %></td> 
        <td><%= tender.tender_announcement_date%></td>
        <td><%= tender.estimated_value%></td>
        <td><%= tender.cpv_code%></td>
        <td><%= tender[:cpvDescription]%></td>
      </tr>
    <% end %>
  </tbody>
</table>

