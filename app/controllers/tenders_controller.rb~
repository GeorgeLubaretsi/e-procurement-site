class TendersController < ApplicationController
  helper_method :sort_column, :sort_direction
  include ApplicationHelper
  include QueryHelper

  def performSearch( data )
    @params = params
    fullResult = QueryHelper.buildTenderSearchQuery(data)
    @numResults = fullResult.count
    @tenders = fullResult.paginate(:page => params[:page]).order(sort_column + ' ' + sort_direction)

    @sort = params[:sort]
    @direction = params[:direction]

    @searchType = "tender" 
    paramList = []
    data.each do |key, field|
      paramList.push(field)
    end
    checkSavedSearch(paramList, @searchType)
  end

  def search
    data = QueryHelper.buildTenderQueryData(params)
    performSearch(data)
  end

  def download
    data = QueryHelper.buildTenderQueryData(params)
    result = QueryHelper.buildTenderSearchQuery(data)

    ActiveRecord::Base.logger.level = Logger::Severity::UNKNOWN

    filePath = "tenders.csv"
    respond_to do |format|
      format.csv {
        buildTenderInfoCSVStringFromTenderList(result,["addition_info", "units_to_supply", "supply_period"],filePath)
        send_file filePath 
      }
    end
  end
   
  def show
    @tender = Tender.find(params[:id])
    @cpv = TenderCpvClassifier.where(:cpv_code => @tender.cpv_code).first
    @tenderUrl = @tender.url_id
    @isWatched = false
    @highlights = ""
    if params[:highlights]
     @highlights = params[:highlights].split("#")
    end
    if current_user
      watched_tenders = current_user.watch_tenders
      watched_tenders.each do |watched|
        if watched.tender_url.to_i == @tender.url_id.to_i
          @isWatched = true
          #reset the update flag to false since this tender has now been viewed
          watched.has_updated = false
          watched.save
          break
        end
      end
    end

    @complaints = Complaint.where(:tender_id => @tender.id)
    @minorCPVCategories = []
    if @tender.sub_codes
      cpvCodes = @tender.sub_codes.split("#")
      cpvCodes.each do |code|
        @minorCPVCategories.push(code)
      end
    end

    @risks = []
    @totalRisk = 0
    flags = @tender.risk_indicators
    if flags
      flags = flags.split("#")
    end
    if flags
      totalFlag = TenderCorruptionFlag.where(:corruption_indicator_id => 100,:tender_id => @tender.id ).first
      if totalFlag
        @totalRisk = totalFlag.value
      end
      flags.each do |flag|
        indicator = CorruptionIndicator.find( flag.to_s )
        @risks.push(indicator)
      end
    end

    #get all tender documentation
    @documentation = []
    documentation = Document.where(:tender_id => @tender.id)
    documentation.each do |document|
      @documentation.push( document )
    end

    @procurer = Organization.find(@tender.procurring_entity_id).name
    agreements = @tender.agreements
    @agreementInfo = []
    agreements.each do |agreement|
      infoItem = { :Type => "Agreement", :OrgName => nil, :whiteList => false, :blackList => false, :OrgID => agreement.organization_id, :value => agreement.amount, :startDate => agreement.start_date, :expiryDate => agreement.expiry_date, :document => agreement.documentation_url }
      if agreement.amendment_number > 0
        infoItem[:Type] = "Amendment "+agreement.amendment_number.to_s
      end
      infoItem[:OrgName] = Organization.find(agreement.organization_id).name
      infoItem[:whiteList] = WhiteListItem.where("organization_id = ?",agreement.organization_id).count > 0
      infoItem[:blackList] = BlackListItem.where("organization_id = ?",agreement.organization_id).count > 0
      @agreementInfo.push(infoItem)
    end

    bidders = @tender.bidders
    @bidderInfo = []
    bidders.each do |bidder|
      org = Organization.find(bidder.organization_id)
      if org
        infoItem = { :id => org.id, :whiteList => false, :blackList => false, :name => org.name, :won => false, :highBid => bidder.first_bid_amount, :lowBid => bidder.last_bid_amount, :numBids => bidder.number_of_bids}
        agreements.each do |agreement|
          if agreement.organization_id == org.id           
            infoItem[:won] = true
            break
          end
        end
        infoItem[:whiteList] = WhiteListItem.where("organization_id = ?",org.id).count > 0
        infoItem[:blackList] = BlackListItem.where("organization_id = ?",org.id).count > 0
        @bidderInfo.push(infoItem)
      end
    end
    @bidderInfo.sort! { |a,b| (a[:lowBid] < b[:lowBid] ? -1 : 1) }
  end

  private
  def sort_column
    params[:sort] || "updated_at"
  end

  def sort_direction
    params[:direction] || "desc"
  end
end
