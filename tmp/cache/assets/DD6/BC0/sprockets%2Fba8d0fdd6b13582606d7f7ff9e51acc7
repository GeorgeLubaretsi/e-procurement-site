o: ActiveSupport::Cache::Entry	:@compressedF:@expires_in0:@created_atf1418034110.2672672:@value{I"
class:EFI"BundledAsset;
FI"id;
F"%287c0e5e8534b39af252ee29d2f01a9dI"logical_path;
FI"site/cpvTree.js;
TI"pathname;
FI"5$root/app/assets/javascripts/site/cpvTree.js.erb;
TI"content_type;
FI"application/javascript;
FI"
mtime;
FI"2014-12-01T09:53:42+04:00;
FI"	body;
FI"ˆsaveData = function(event, data)
{
  var checked = $("#cpvTree").jstree("get_checked",null,true);
  var codestring = "";
  $(checked).each(function (i,node){
    var full_string = $("#cpvTree").jstree("get_text",node);
    var strings = full_string.split(":");
    var cpv = $.trim(strings[0]);
    codestring = codestring + cpv + ','
  })
  $("#codes").val(codestring);
}

isChild = function(code, candidate)
{
  strCode = code.toString();
  strCandidate = candidate.toString();
  if( strCandidate <= strCode )
  {
    return false;
  }
  found = false;
  pos = strCode.length;
  while( !found )
  {
    found = strCode[pos-1] != "0";
    if(!found)
    {
      strCode = strCode.substring(0,pos-1);
      pos = strCode.length;
    }  
  }
  return strCandidate.substring(0,pos) == strCode;
}

openParentNodes = function( childNodes, codes )
{

  var myTree = $("#cpvTree");
  var myTreeContainer = $.jstree._reference(myTree).get_container();
  var fullNodeList = myTreeContainer.find("li");

  for (var k = 0; k < childNodes.length; ++k){
    var full_string = $("#cpvTree").jstree("get_text",childNodes[k]);
    var strings = full_string.split(":");
    var cpv = $.trim(strings[0]);
    if( cpv == "00000000" ){
      continue;
    }
    for( var i = 0; i < codes.length; i++){
      if(isChild(cpv, codes[i])){
        $("#cpvTree").jstree("open_node",childNodes[k]);
      }
    }
  }

  var newNodes = []
  var newNodeList = myTreeContainer.find("li");
  
  for(var i = 0; i < newNodeList.length; ++i){
    found = false;
    for(var k = 0; k < fullNodeList.length; ++k){
      if( newNodeList[i].attributes[0].value == fullNodeList[k].attributes[0].value ){
        found = true;
        break;
      }
    }
    if(!found){
      newNodes.push(newNodeList[i]);
    }
  }

  return newNodes
}


loadSavedNodes = function()
{
  var myTree = $("#cpvTree");
  var codestring = $("#codes").val();
  var codes = codestring.split(",");
  var myTreeContainer = $.jstree._reference(myTree).get_container();
  var childNodes = myTreeContainer.find("li");
  while( childNodes.length > 0 ){
    childNodes = openParentNodes(childNodes,codes);
  }

  checkExisting()
}

checkExisting = function()
{
  var myTree = $("#cpvTree");
  var codestring = $("#codes").val();
  var codes = codestring.split(",");
  var myTreeContainer = $.jstree._reference(myTree).get_container();
  var childNodes = myTreeContainer.find("li");

  for( var i = 0; i < codes.length; i++){
    for (var k = 0; k < childNodes.length; ++k){
      var full_string = $("#cpvTree").jstree("get_text",childNodes[k]);
      var strings = full_string.split(":");
      var cpv = $.trim(strings[0]);
      if(cpv == codes[i]){
        var parent = $("#cpvTree").jstree("_get_parent",childNodes[k]);
        $("#cpvTree").jstree("check_node",childNodes[k]);
      }
    }
  }
}

initTree = function( path )
{
  var myTree = $("#cpvTree").bind("check_node.jstree uncheck_node.jstree",saveData).jstree({
      "json_data" : {
	            "ajax" : { 
                "url" : path,
                "data" : function (n) {
	                return { id : n.attr ? n.attr("id") : 0 };
                 }
              },
             "progressive_render" : true
          },
        "themes" : {
            "theme" : "default",
            "url" : "/assets/treeStyle.css"
        },
        "plugins" : [ "ui", "themes","json_data", "checkbox"]
  });

  $("#cpvTree").bind("loaded.jstree",loadSavedNodes)
}
;
;
FI"asset_paths;
F[I"5$root/app/assets/javascripts/site/cpvTree.js.erb;
TI"dependency_paths;
F[{I"	path;
FI"5$root/app/assets/javascripts/site/cpvTree.js.erb;
TI"
mtime;
FIu:	Time%¬€“£¤Ö
:@_zoneI"GET;
T:nano_numiý:nano_deni:submicro"vP:offseti@8I"hexdigest;
F"%120a555ed20e6767c432c14e07f914f5I"_version;
F"%0868aba5d4b750d3a9421721ea3d9b9c